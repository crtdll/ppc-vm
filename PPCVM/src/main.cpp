#include "stdafx.h"
#include "virtual_machine.h"

void setup_syscalls() {
    get_core()->add_syscall([](virtual_machine* vm) {
		// for now, only supports formatters
		printf("[PRINTF] %s", (const char*)(vm->get_current_context()->gpr[3]));
	}, 0);

    get_core()->add_syscall([](virtual_machine* vm) {
		// set r3 to the address of ram
		vm->get_current_context()->gpr[3] = (uint64_t)get_core()->get_ram();
	}, 1);

    get_core()->add_syscall([](virtual_machine* vm) {
		// print stack
		printf("current stack allocated: 0x%llX\n", (uint64_t)&vm->get_stack()[STACK] - vm->get_current_context()->gpr[1]);
		printf("last stack frame: 0x%llx\n", *(uint64_t*)vm->get_current_context()->gpr[1]);
	}, 2);

    get_core()->add_syscall([](virtual_machine* vm) {
		// print registers
		vm->print_registers();
		printf("\n");
	}, 3);

    get_core()->add_syscall([](virtual_machine* vm) {
		// memset
		memset((void*)vm->get_current_context()->gpr[3], (int)vm->get_current_context()->gpr[4], vm->get_current_context()->gpr[5]);
	}, 4);

	get_core()->add_syscall([](virtual_machine* vm) {
		// get execution address
        vm->get_current_context()->gpr[3] = (uint64_t)vm->get_payload();
	}, 5);

    get_core()->add_syscall([](virtual_machine* vm) {
        // "create thread"
        virtual_machine* payload = get_core()->create_vm(vm->get_current_context()->gpr[3]);
        if (payload) {
            payload->execute((uint8_t*)vm->get_current_context()->gpr[4], (void*)vm->get_current_context()->gpr[5]);
        }
    }, 6);
}

int main() {
    uint8_t example_1[] = {
        0x7D, 0x88, 0x02, 0xA6,
        0x91, 0x81, 0xFF, 0xF8,
        0x94, 0x21, 0xFF, 0xD0,
        0x38, 0x60, 0x00, 0x48,
        0x98, 0x61, 0x00, 0x00,
        0x38, 0x60, 0x00, 0x65,
        0x98, 0x61, 0x00, 0x01,
        0x38, 0x60, 0x00, 0x79,
        0x98, 0x61, 0x00, 0x02,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x03,
        0x38, 0x60, 0x00, 0x66,
        0x98, 0x61, 0x00, 0x04,
        0x38, 0x60, 0x00, 0x72,
        0x98, 0x61, 0x00, 0x05,
        0x38, 0x60, 0x00, 0x6F,
        0x98, 0x61, 0x00, 0x06,
        0x38, 0x60, 0x00, 0x6D,
        0x98, 0x61, 0x00, 0x07,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x08,
        0x38, 0x60, 0x00, 0x50,
        0x98, 0x61, 0x00, 0x09,
        0x38, 0x60, 0x00, 0x50,
        0x98, 0x61, 0x00, 0x0A,
        0x38, 0x60, 0x00, 0x43,
        0x98, 0x61, 0x00, 0x0B,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x0C,
        0x38, 0x60, 0x00, 0x70,
        0x98, 0x61, 0x00, 0x0D,
        0x38, 0x60, 0x00, 0x61,
        0x98, 0x61, 0x00, 0x0E,
        0x38, 0x60, 0x00, 0x79,
        0x98, 0x61, 0x00, 0x0F,
        0x38, 0x60, 0x00, 0x6C,
        0x98, 0x61, 0x00, 0x10,
        0x38, 0x60, 0x00, 0x6F,
        0x98, 0x61, 0x00, 0x11,
        0x38, 0x60, 0x00, 0x61,
        0x98, 0x61, 0x00, 0x12,
        0x38, 0x60, 0x00, 0x64,
        0x98, 0x61, 0x00, 0x13,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x14,
        0x38, 0x60, 0x00, 0x70,
        0x98, 0x61, 0x00, 0x15,
        0x38, 0x60, 0x00, 0x6F,
        0x98, 0x61, 0x00, 0x16,
        0x38, 0x60, 0x00, 0x67,
        0x98, 0x61, 0x00, 0x17,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x18,
        0x38, 0x60, 0x00, 0x70,
        0x98, 0x61, 0x00, 0x19,
        0x38, 0x60, 0x00, 0x6F,
        0x98, 0x61, 0x00, 0x1A,
        0x38, 0x60, 0x00, 0x67,
        0x98, 0x61, 0x00, 0x1B,
        0x38, 0x60, 0x00, 0x20,
        0x98, 0x61, 0x00, 0x1C,
        0x38, 0x60, 0x00, 0x70,
        0x98, 0x61, 0x00, 0x1D,
        0x38, 0x60, 0x00, 0x6F,
        0x98, 0x61, 0x00, 0x1E,
        0x38, 0x60, 0x00, 0x67,
        0x98, 0x61, 0x00, 0x1F,
        0x38, 0x60, 0x00, 0x21,
        0x98, 0x61, 0x00, 0x20,
        0x38, 0x60, 0x00, 0x0A,
        0x98, 0x61, 0x00, 0x21,
        0x38, 0x60, 0x00, 0x00,
        0x98, 0x61, 0x00, 0x22,
        0x7C, 0x23, 0x0B, 0x78,
        0x38, 0x00, 0x00, 0x00,
        0x44, 0x00, 0x00, 0x02,
        0x38, 0x00, 0x00, 0x01,
        0x44, 0x00, 0x00, 0x02,
        0x38, 0x63, 0x02, 0x00,
        0x38, 0x80, 0x00, 0x69,
        0x38, 0xA0, 0x01, 0x00,
        0x48, 0x00, 0x00, 0x19,
        0x38, 0x21, 0x00, 0x30,
        0x81, 0x81, 0xFF, 0xF8,
        0x7D, 0x88, 0x03, 0xA6,
        0xFF, 0xFF, 0xFF, 0xFF, // TEST BREAKPOINT TO CHECK RAM+0x200
        0x4E, 0x80, 0x00, 0x20,
        0x38, 0x00, 0x00, 0x04,
        0x44, 0x00, 0x00, 0x02,
        0x4E, 0x80, 0x00, 0x20
    };

    uint8_t example_2[] = {
        0x38, 0x60, 0x00, 0x08,
        0x38, 0x80, 0x00, 0x06,
        0x7E, 0x03, 0x20, 0x00,
        0x40, 0x90, 0xFF, 0xFC,
        0x4E, 0x80, 0x00, 0x20
    };

    uint8_t example_3[] = {
        0x7D, 0x88, 0x02, 0xA6,
        0x91, 0x81, 0xFF, 0xF8,
        0x94, 0x21, 0xFF, 0xF0,
        0x38, 0x00, 0x00, 0x05,
        0x44, 0x00, 0x00, 0x02,
        0x38, 0x63, 0x00, 0x3C,
        0x38, 0xA0, 0x00, 0x59,
        0x7C, 0x64, 0x1B, 0x78,
        0x38, 0x60, 0x00, 0xFF,
        0x38, 0x00, 0x00, 0x06,
        0x44, 0x00, 0x00, 0x02,
        0x38, 0x21, 0x00, 0x10,
        0x81, 0x81, 0xFF, 0xF8,
        0x7D, 0x88, 0x03, 0xA6,
        0x4E, 0x80, 0x00, 0x20,
        0x38, 0x63, 0x00, 0x10,
        0x38, 0x00, 0x00, 0x03,
        0x44, 0x00, 0x00, 0x02,
        0x4E, 0x80, 0x00, 0x20
    };

    setup_syscalls();

    // ** execute takes care of cleaning up the allocations.

    // majority test
    virtual_machine* payload_1 = get_core()->create_vm(1);
    if (payload_1) {
        payload_1->execute(example_1);
    }

    // branch condition test
	virtual_machine* payload_2 = get_core()->create_vm(2);
    if (payload_2) {
        payload_2->execute(example_2);
    }
    
    // threading test
	virtual_machine* payload_3 = get_core()->create_vm(3);
	if (payload_3) {
        payload_3->execute(example_3);
	}

    system("pause");
    return 0;
}